%pure-parser
%locations
%defines
%error-verbose
%parse-param {driver_t *driver}
%lex-param {void *scanner}

%{
#include <algorithm>
#include <functional>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <vector>

#include "debug.hpp"
#include "driver.hpp"
#include "load.hpp"
#include "new_types.hpp"
#include "parse.hpp"
#include "redefine_yy.hpp"

  using namespace std;
  using namespace std::placeholders;

  const int debug_parser=0;
  
  int parser_lex(YYSTYPE *lvalp,YYLTYPE *llocp,void *scanner);
  void parser_error(YYLTYPE *locp,driver_t *driver,const char *err)
  {CRASH("%d %s",locp->first_line,err);}

#define scanner driver->scanner
  %}

//union used to catch all symbols
%union
{
  int int_numb;
  double double_numb;
  double_vect_t *double_vect;
  char *text;
  var_t *var;
}

//type for terminal symbols
%token DOUBLE_VECT_LOAD_COLUMN DOUBLE_VECT_LOAD
%token AVERAGE NAIVE_ERROR SUBSET
%token PRINT
%token <double_numb> DOUBLE_NUMB
%token <double_vect> DOUBLE_VECT
%token <int_numb> INT_NUMB
%token <text> QUOTED_TEXT
%token <var> UNINIT_VAR DOUBLE_NUMB_VAR DOUBLE_VECT_VAR SINGLE_ARG_FUNCTION DOUBLE_ARG_FUNCTION

//types for non-terminal symbol
%type <double_vect> double_vect_exp double_vect_load_column
%type <double_numb> double_numb_exp

//associativity
%right '=' SUMMASSIGN SUBTASSIGN PRODASSIGN DIVIASSIGN
%left '-' '+'
%left '*' '/'
%left NEG

%%

 //generic
input:
       %empty
     | input line
;

//line
line:
       '\n'
     | double_vect_exp '\n'
     | double_numb_exp '\n'
     | print_command '\n' {cout<<endl;}
;

//vect expression
double_vect_exp:
        UNINIT_VAR '=' double_vect_exp { (*$1)=(*$3);$$=$3; }
      | DOUBLE_VECT_VAR '=' double_vect_exp { (*$1)=(*$3);$$=$3; }
      | DOUBLE_VECT_VAR { $$=new double_vect_t;(*$$)=*($1->double_vect); }

      | double_vect_exp '+' double_vect_exp { $$=new double_vect_t;(*$$)=(*$1)+(*$3); }
      | double_vect_exp '-' double_vect_exp { $$=new double_vect_t;(*$$)=(*$1)-(*$3); }
      | double_vect_exp '*' double_vect_exp { $$=new double_vect_t;(*$$)=(*$1)*(*$3); }
      | double_vect_exp '/' double_vect_exp { $$=new double_vect_t;(*$$)=(*$1)/(*$3); }

      | DOUBLE_VECT_VAR SUMMASSIGN double_vect_exp { 
	(*$1->double_vect)+=(*$3);$$=new double_vect_t;(*$$)=(*$1->double_vect); }
      | DOUBLE_VECT_VAR SUBTASSIGN double_vect_exp {
	(*$1->double_vect)-=(*$3);$$=new double_vect_t;(*$$)=(*$1->double_vect); }
      | DOUBLE_VECT_VAR PRODASSIGN double_vect_exp {
	(*$1->double_vect)*=(*$3);$$=new double_vect_t;(*$$)=(*$1->double_vect); }
      | DOUBLE_VECT_VAR DIVIASSIGN double_vect_exp {
	(*$1->double_vect)/=(*$3);$$=new double_vect_t;(*$$)=(*$1->double_vect); }

      | double_vect_exp '+' double_numb_exp { $$=new double_vect_t;(*$$)=(*$1)+$3; }
      | double_vect_exp '-' double_numb_exp { $$=new double_vect_t;(*$$)=(*$1)-$3; }
      | double_vect_exp '*' double_numb_exp { $$=new double_vect_t;(*$$)=(*$1)*$3; }
      | double_vect_exp '/' double_numb_exp { $$=new double_vect_t;(*$$)=(*$1)/$3; }

      | DOUBLE_VECT_VAR SUMMASSIGN double_numb_exp { 
	(*$1->double_vect)+=$3;$$=new double_vect_t;(*$$)=(*$1->double_vect); }
      | DOUBLE_VECT_VAR SUBTASSIGN double_numb_exp {
	(*$1->double_vect)-=$3;$$=new double_vect_t;(*$$)=(*$1->double_vect); }
      | DOUBLE_VECT_VAR PRODASSIGN double_numb_exp {
	(*$1->double_vect)*=$3;$$=new double_vect_t;(*$$)=(*$1->double_vect); }
      | DOUBLE_VECT_VAR DIVIASSIGN double_numb_exp {
	(*$1->double_vect)/=$3;$$=new double_vect_t;(*$$)=(*$1->double_vect); }

      | double_numb_exp '+' double_vect_exp { $$=new double_vect_t;(*$$)=$1+(*$3); }
      | double_numb_exp '-' double_vect_exp { $$=new double_vect_t;(*$$)=$1-(*$3); }
      | double_numb_exp '*' double_vect_exp { $$=new double_vect_t;(*$$)=$1*(*$3); }
      | double_numb_exp '/' double_vect_exp { $$=new double_vect_t;(*$$)=$1/(*$3); }

      | SINGLE_ARG_FUNCTION '(' double_vect_exp ')' {
	$$=new double_vect_t;
	$$->resize($3->size());
	transform($3->begin(),$3->end(),$$->begin(),$1->single_arg_function); }

      | DOUBLE_ARG_FUNCTION '(' double_vect_exp ',' double_numb_exp ')' {
	$$=new double_vect_t;
	$$->resize($3->size());
	transform($3->begin(),$3->end(),$$->begin(),bind($1->double_arg_function,_1,$5)); }

      | '-' double_vect_exp %prec NEG { $$=new double_vect_t;(*$$)=-(*$2); }
      | '(' double_vect_exp ')' { $$=$2; }

      | SUBSET '(' double_vect_exp ',' INT_NUMB ',' INT_NUMB ')' {
	$$=new double_vect_t;
	for(int i=$5;i<$7;i++) $$->push_back((*$3)[i]);}
      | double_vect_load_column
;

//double expression
double_numb_exp:
        UNINIT_VAR '=' double_numb_exp {(*$1)=$3;$$=$3;}
      | DOUBLE_NUMB {$$=$1;}
      | INT_NUMB {$$=$1;}
      | DOUBLE_NUMB_VAR {$$=$1->double_numb;}
      | DOUBLE_NUMB_VAR '=' double_numb_exp {(*$1)=$3;$$=$3;}

      | double_numb_exp '+' double_numb_exp { $$=$1+$3; }
      | double_numb_exp '-' double_numb_exp { $$=$1-$3; }
      | double_numb_exp '*' double_numb_exp { $$=$1*$3; }
      | double_numb_exp '/' double_numb_exp { $$=$1/$3; }

      | DOUBLE_NUMB_VAR SUMMASSIGN double_numb_exp { $1->double_numb+=$3;$$=$1->double_numb; }
      | DOUBLE_NUMB_VAR SUBTASSIGN double_numb_exp { $1->double_numb-=$3;$$=$1->double_numb; }
      | DOUBLE_NUMB_VAR PRODASSIGN double_numb_exp { $1->double_numb*=$3;$$=$1->double_numb; }
      | DOUBLE_NUMB_VAR DIVIASSIGN double_numb_exp { $1->double_numb/=$3;$$=$1->double_numb; }

      | '-' double_numb_exp %prec NEG { $$=-$2; }
      | '(' double_numb_exp ')' { $$=$2; }
      
      | SINGLE_ARG_FUNCTION '(' double_numb_exp ')' {$$=(*($1->single_arg_function))($3);}
      | DOUBLE_ARG_FUNCTION '(' double_numb_exp ',' double_numb_exp ')' {$$=(*($1->double_arg_function))($3,$5);}
      | AVERAGE '(' double_vect_exp ')' {$$=$3->average();}
      | NAIVE_ERROR '(' double_vect_exp ')' {$$=$3->naive_error();}
;

//load a column in a file
double_vect_load_column:
        DOUBLE_VECT_LOAD_COLUMN '(' QUOTED_TEXT ',' INT_NUMB ')'
        {
	  $$=new double_vect_t;
	  (*$$)=read_column_in_file($3,$5);
	}
      | DOUBLE_VECT_LOAD '(' QUOTED_TEXT ')'
        {
	  $$=new double_vect_t;
	  (*$$)=read_column_in_file($3,0);
	}
;

//print
print_command:
        PRINT
      | print_command double_numb_exp {cout<<$2<<" ";}
      | print_command double_vect_exp {for(double_vect_t::iterator it=$2->begin();it!=$2->end();it++) cout<<*it<<endl;}
      | print_command QUOTED_TEXT {cout<<$2<<" ";}
;
