%option noyywrap
%option prefix="parser_"
%option outfile="tokenize.cpp"
%option reentrant
%option bison-bridge
%option bison-locations

%{
#include <stdio.h>
#include <iostream>
#include <vector>
#include "debug.hpp"
#include "driver.hpp"

   using namespace std;

#define YY_EXTRA_TYPE driver_t*

#define YY_INPUT(buf,result,max_size)		\
   {						\
     char c;					\
     fscanf(yyextra->fin,"%c",&c);		\
     if(feof(yyextra->fin)) result=YY_NULL;	\
     else					\
       {					\
	 result=1;				\
	 buf[0]=c;				\
       }					\
   }
   
#include "parse.hpp"
   
   const int debug_lexer=1;
%}

%%
 /* ignoring rules */
\/\/[[:alnum:][:blank:]^+-/=*()\n]* if(debug_lexer) printf("Ignoring comment: %s\n",yytext);
[[:blank:]]+ if(debug_lexer) printf("Ignoring spaces: \"%s\"\n",yytext);
^[[:blank:]]+\n+ if(debug_lexer) printf("Ignoring new line at the begin of a line\n");

 /* quoted text */
\"[[:alnum:][:blank:]%]*\" yylval->text=strndup(yytext+1,strlen(yytext)-2); return QUOTED_TEXT;

 /* new line */
\n return '\n';

 /* commands */
double_vect_load_column return DOUBLE_VECT_LOAD_COLUMN;
print return PRINT;
average return AVERAGE;

 /* variable name */
[[:alpha:]][[:alnum:]]* {
  //search
  if(yyextra->var_map.find(yytext)==yyextra->var_map.end()) cout<<"Add ";
  else cout<<"Found ";
  
  //take (or add)
  yylval->var=&(yyextra->var_map[yytext]);
  yylval->var->name=yytext;
  cout<<"var "<<yytext<<" of type: ";
  
  //print type
  switch(yyextra->var_map[yytext].type)
    {
    case UNINIT_VAR: cout<<"UNINIT_VAR"<<endl; break;
    case DOUBLE_NUMB_VAR: cout<<"DOUBLE_NUMB_VAR"<<endl; break;
    case DOUBLE_VECT_VAR: cout<<"DOUBLE_VECT_VAR"<<endl; break;
    default: CRASH("Unknown type ",yylval->var->type);
    }
  
  return yylval->var->type;
}

 /* operators */
\+ return '+';
-  return '-';
\( return '(';
\) return ')';
\* return '*';
\/ return '/';

 /* equal and comma */
\= return '=';
\, return ',';

 /* recognizing numbers */
([0-9]*\.[0-9]+)|([0-9]+\.[0-9]*) sscanf(yytext,"%lg",&yylval->double_numb); return DOUBLE_NUMB;
([0-9]+) sscanf(yytext,"%d",&yylval->int_numb); return INT_NUMB;

%%

//read a list of two pts
void read_from_file(const char *path)
{
  driver_t driver(path);
  parser_parse(&driver);
  cout<<"EXT: "<<driver.var_map["cane"].double_vect->size()<<endl;
}
